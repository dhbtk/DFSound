#!/usr/bin/ruby
require 'sdl'
require 'yaml'
require 'iconv'

class DFSound
	def initialize() 
		puts "DFSound 0.1"
		puts "Copyright (c) 2010 NieXS - All rights reserved."
		puts "See the file LICENSE for licensing information."
		puts ""
		puts "Starting up..."
		puts "Starting up SDL..."
		# Setting up SDL
		SDL.init(SDL::INIT_AUDIO)
		SDL::Mixer.open(44010,SDL::Mixer::DEFAULT_FORMAT,2,512)
		# Sound effects
		@sfx   = []
		# Loading up the events.
		puts "Loading events..."
		@events = YAML::load(open('events.yml')) || []
		@current_stateful_event = nil
		# gamelog.txt
		puts "Loading game log..."
		@gamelog = File.open(ARGV[0],'a+')
		@gamelog.seek(0,IO::SEEK_END)
		puts "Ready."
	end
	
	def main_loop()
		puts "Starting main loop..."
		while true
			line = @gamelog.gets
			begin
				line = Iconv.conv("UTF-8","ISO-8859-1",line)
			rescue Exception
				next
			end
			if line.nil? # ie, EOF
				# Wait.
				sleep 0.1
			else
				for event in @events
					begin
						if Regexp.new(event['pattern']) =~ line
							begin
								if event['stateful']
									@current_stateful_event = event
								end
								if event['music']
									if event['music'].kind_of?(Array)
										music = event['music'].shuffle[0]
									else
										music = event['music']
									end
									music = SDL::Mixer::Music.load('music/'+music)
									SDL::Mixer.play_music(music,1)
								end
								if event['sfx']
									if event['sfx'].kind_of?(Array)
										sfx = event['sfx'].shuffle[0]
									else
										sfx = event['sfx']
									end
									sfx   = SDL::Mixer::Wave.load('sfx/'+sfx)
									SDL::Mixer.play_channel(-1,sfx,0)
								end
							rescue SDL::Error
								puts "---ERROR---"
								puts "The event for the pattern \"#{event['pattern']}\" has missing/unssuported music or sound effects."
								exit 1
							end
							break
						end
					rescue SignalException
						exit 0
					rescue RegexpError
						puts "---ERROR---"
						puts "Broken pattern: #{event['pattern']}"
						exit 1
					end
				end
			end
			# Implementation for stateful events
			if !SDL::Mixer.play_music? && @current_stateful_event
				if @current_stateful_event['music'].kind_of?(Array)
					music = @current_stateful_event['music'].shuffle[0]
				else
					music = @current_stateful_event['music']
				end
				music = SDL::Mixer::Music.load('music/'+music)
				SDL::Mixer.play_music(music,0)
			end
		end
	end
end

if __FILE__ == $0
	DFSound.new.main_loop
end